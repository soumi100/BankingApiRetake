/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.25).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.model.User;
import io.swagger.model.UserDTO;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.validation.Valid;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-06-02T11:15:57.209Z[GMT]")
@Validated
public interface UserApi {

    @Operation(summary = "Delete User by Id", description = "Calling this allows you to fetch the users", security = {
            @SecurityRequirement(name = "bearerAuth")}, tags = {"Employee"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "deleted users"),

            @ApiResponse(responseCode = "400", description = "bad input parameter"),

            @ApiResponse(responseCode = "401", description = "Access token is missing or invalid")})
    @RequestMapping(value = "/user/{id}",
            method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteuserbyid(@Parameter(in = ParameterIn.PATH, description = "ID of user to return", required = true, schema = @Schema()) @PathVariable("id") Long id);


    @Operation(summary = "Get user by id", description = "Calling this allows you to fetch the articles", security = {
            @SecurityRequirement(name = "bearerAuth")}, tags = {"Employee", "Customer"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "the articles", content = @Content(schema = @Schema(implementation = User.class))),

            @ApiResponse(responseCode = "400", description = "bad input parameter")})
    @RequestMapping(value = "/user/{id}",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<User> getuserbyid(@Parameter(in = ParameterIn.PATH, description = "ID of article to retun", required = true, schema = @Schema()) @PathVariable("id") Long id);


    @Operation(summary = "Update a user", description = "Update user", security = {
            @SecurityRequirement(name = "bearerAuth")}, tags = {"Employee", "Customer"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "User updated"),

            @ApiResponse(responseCode = "400", description = "bad request", content = @Content(schema = @Schema(implementation = String.class))),

            @ApiResponse(responseCode = "401", description = "Access token is missing or invalid"),

            @ApiResponse(responseCode = "404", description = "The specified resource was not found", content = @Content(schema = @Schema(implementation = String.class)))})
    @RequestMapping(value = "/user/{id}",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.PUT)
    ResponseEntity<Void> updateUser(@Parameter(in = ParameterIn.PATH, description = "ID of article to retun", required = true, schema = @Schema()) @PathVariable("id") Long id, @Parameter(in = ParameterIn.DEFAULT, description = "", schema = @Schema()) @Valid @RequestBody User body);

    @Operation(summary = "Update current user password", description = "Update current user password", security = {
            @SecurityRequirement(name = "bearerAuth")}, tags = {"Employee", "Customer"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "User updated"),

            @ApiResponse(responseCode = "400", description = "bad request", content = @Content(schema = @Schema(implementation = String.class))),

            @ApiResponse(responseCode = "401", description = "Access token is missing or invalid"),

            @ApiResponse(responseCode = "404", description = "The specified resource was not found", content = @Content(schema = @Schema(implementation = String.class)))})
    @RequestMapping(value = "/user/changeMyPassword",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.PUT)
    ResponseEntity<Void> updateCurrentUserPassword(@Parameter(in = ParameterIn.DEFAULT, description = "", schema = @Schema()) @Valid @RequestBody UserDTO userDTO);
}

